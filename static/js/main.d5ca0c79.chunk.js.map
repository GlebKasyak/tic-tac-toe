{"version":3,"sources":["components/Game/Square/Square.jsx","components/Game/Board/Board.jsx","functions/index.js","components/Game/GameInfo/MoveButton.jsx","components/Game/GameInfo/GameInfo.jsx","components/Game/Status.jsx","components/Game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","highlight","value","onClick","index","winLine","indexOf","className","Board","squares","map","sq","i","key","renderSquare","calculateWinner","lines","length","a","b","c","MoveButton","move","currentMove","GameInfo","history","stepNumber","jumpTo","moves","step","getPlayerStatus","status","Status","win","winner","player","draw","nextPlayer","initialSquares","Array","fill","Game","useState","setHistory","setStepNumber","xIsNext","setXIsNext","current","every","el","start","goToStart","historyClone","slice","squaresClone","concat","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5ca0c79.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ value, onClick, index, winLine }) => {\r\n\r\n    let highlight;\r\n    //проверка линии\r\n    if(winLine && winLine.indexOf(index) >= 0 ) highlight = \"highlight\";\r\n\r\n    return (\r\n        <button className={ `square ${ highlight }` } onClick={ onClick }>\r\n            { value }\r\n        </button>\r\n    )\r\n\r\n};\r\n\r\nexport default Square;","import React, { Fragment } from \"react\";\r\nimport Square from \"../Square/Square\";\r\n\r\n\r\nconst Board = ({ squares, onClick, winLine }) => {\r\n    const renderSquare = i =>\r\n        <Square\r\n            value={ squares[i] }\r\n            index={ i }\r\n            onClick={ () => onClick(i) }\r\n            winLine={ winLine }\r\n        />;\r\n\r\n    return (\r\n        <div className=\"board-row\">\r\n            { squares.map((sq, i) => <Fragment key={ i }>{ renderSquare(i) }</Fragment> ) }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","\r\nexport const calculateWinner = squares => {\r\n\r\n    const lines = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n        [0, 4, 8], [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                squares: squares[a],\r\n                winLine: lines[i]\r\n            };\r\n        }\r\n    }\r\n    return null\r\n};","import React from 'react';\r\n\r\nconst MoveButton = ({ onClick, move, currentMove }) => (\r\n    <li>\r\n        <button\r\n            className={ `btn btn-move ${ currentMove }`}\r\n            onClick={ onClick }\r\n        >\r\n            Got to next step # { move }\r\n        </button>\r\n    </li>\r\n);\r\n\r\nexport default MoveButton;","import React from 'react';\r\nimport MoveButton from \"./MoveButton\";\r\n\r\nconst GameInfo = ({ history, stepNumber, jumpTo }) => {\r\n\r\n    const moves = history.map((step, move) => {\r\n        if(!!move) {\r\n            return <MoveButton\r\n                currentMove={ move === stepNumber ? \"currentMove\" : \"\" }\r\n                key={ move }\r\n                move={ move }\r\n                onClick={ () => jumpTo(move) }\r\n            />;\r\n        }\r\n        return false\r\n    });\r\n\r\n    return (\r\n        <div className=\"game-info\">\r\n            <h2>Game information</h2>\r\n            <ol className=\"info-list\">{ moves }</ol>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from \"react\";\r\n\r\n\r\nexport const getPlayerStatus = status => {\r\n    return status ? \"X\" : \"O\"\r\n};\r\n\r\nexport const showADraw = status => {\r\n    return (\r\n        <h1 className=\"draw\">{ status }</h1>\r\n    )\r\n};\r\n\r\n\r\nconst nextPlayer = player => (\r\n    <h1>Next player:\r\n        <span className=\"next-player\" >{ getPlayerStatus(player) }</span>\r\n    </h1>\r\n);\r\n\r\nconst winningPlayer = win => (\r\n    <h1>Winner <span className=\"winner-player\">{ win }</span></h1>\r\n);\r\n\r\n\r\nexport const Status = ({winner, player, draw}) => (\r\n    <>\r\n        { (winner && winningPlayer(winner.squares)) || (draw && showADraw(draw)) || nextPlayer(player) }\r\n    </>\r\n);","import React, { useState } from \"react\";\r\nimport Board from \"./Board/Board\";\r\nimport { calculateWinner } from \"../../functions\";\r\nimport GameInfo from \"./GameInfo/GameInfo\";\r\nimport { getPlayerStatus, Status } from \"./Status\";\r\n\r\nconst initialSquares = Array(9).fill(null);\r\n\r\nconst Game = () => {\r\n\r\n    const [history, setHistory] = useState([{squares: initialSquares}]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n\r\n    const handleClick = i => {\r\n        //при откаде хода, стирается вся будующая история (если начать ходить)\r\n        const historyClone = history.slice(0, stepNumber + 1);\r\n        const current = historyClone[historyClone.length - 1];\r\n        const squaresClone = current.squares.slice();\r\n\r\n        //конец игры\r\n        if(calculateWinner(squaresClone) || squaresClone[i]) return;\r\n\r\n        squaresClone[i] = getPlayerStatus(xIsNext);\r\n        setHistory(historyClone.concat({ squares: squaresClone }));\r\n        setStepNumber(historyClone.length);\r\n        setXIsNext(!xIsNext);\r\n    };\r\n\r\n    const jumpTo = step => {\r\n        setStepNumber(step) ;\r\n        setXIsNext((step % 2) === 0)\r\n    };\r\n\r\n    //старт игры\r\n    const goToStart = (start = 0) => {\r\n        jumpTo(start);\r\n        setHistory([{ squares: initialSquares}])\r\n    };\r\n\r\n    //рендер хода, соответсвующего stepNumber\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    //ничья\r\n    let draw = current.squares.every(el => !!el) && \"Draw\";\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                { < Status winner={ winner } player={ xIsNext } draw={ draw } /> }\r\n                <button\r\n                    onClick={ () => goToStart()}\r\n                    className=\"btn btn-start\"\r\n                >Go to game start</button>\r\n                <Board\r\n                    onClick={ i => handleClick(i) }\r\n                    squares={ current.squares }\r\n                    winLine={ winner && winner.winLine }\r\n                />\r\n                { !!stepNumber && <GameInfo history={ history } stepNumber={ stepNumber } jumpTo={ jumpTo }/> }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game/Game\";\n\nconst App = () => <Game />;\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}